#compdef git-topics
#description Manage topic branches

_git-topics() {
  local curcontext="$curcontext" state line
  declare -A opt_args

  _arguments -C -S -s \
    ":command:->command" \
    "*::options:->options"

  case "$state" in
    command)
      local -a commands
      commands=(
        finish:"Merge a topic branch to the stable branch"
        help:"Display help for a git-topics command"
        integrate:"Merge a topic branch to the integration branch"
        list:"List existing topic branches and their statuses"
        reintegrate:"Rewind & rebuild an integration branch"
        release:"Tag the stable branch with a new version"
        review:"Push a topic branch upstream for review"
        setup:"Configure git-topics"
        start:"Start a new topic branch"
      )
      _describe -t commands "git topics" commands
      ;;
    options)
      case $line[1] in
        finish) __git_topics_finish ;;
        help) __git_topics_help ;;
        integrate) __git_topics_integrate ;;
        list) __git_topics_list ;;
        reintegrate) __git_topics_reintegrate ;;
        release) __git_topics_release ;;
        review) __git_topics_review ;;
        setup) __git_topics_setup ;;
        start) __git_topics_start ;;
      esac
  esac
}

__git_topics_finish() {
  _arguments -C -S -s ":topic:__integrated_topics"
}

__git_topics_help() {
  local -a commands
  commands=(
    finish
    help
    integrate
    list
    reintegrate
    release
    review
    setup
    start
  )
  local -a guides
  guides=(
    management
  )
  _alternative "commands:command:($commands)" "guides:guide:($guides)"
}

__git_topics_integrate() {
  _arguments -C -S -s ":topic:__started_topics"
}

__git_topics_list() {
  _arguments -C -S -s \
    {-a,--all}"[list both local and remote topics]" \
    {-r,--remote}"[list only remote topics]" \
    {-s,--short}"[output a short format]" \
    {-p,--porcelain}"[output a machine-readable format]"
}

__git_topics_reintegrate() {
  _arguments -C -S -s \
    "--onto=[merge topics onto this branch]:branches:__git_branches" \
    "--allow-empty[do not abort due to empty todo list]" \
    "--continue[continue after resolving a merge conflict]" \
    "--skip[skip the current merge and continue]" \
    "--abort[abort and reset the original branch]" \
    "--quit[abort but keep the branch where it is]" \
    "--edit-todo[edit the todo list]"
}

__git_topics_release() {
  _alternative "versions:version:(major minor patch)"
}

__git_topics_review() {
  _arguments -C -S -s ":topic:__started_topics"
}

__git_topics_setup() {
  _arguments -C -S -s {-f,--force}"[force setup to start over again]"
}

__git_topics_start() {
  _default
}

__started_topics() {
  local expl
  local -a topics
  topics=(${${(f)"$(_call_program topics \
    git topics list --all --porcelain | grep '^-' | sed 's/^- //' 2>/dev/null
  )"}})
  __git_command_successful && _wanted topics expl "topic" compadd $topics
}

__integrated_topics() {
  local expl
  local -a topics
  topics=(${${(f)"$(_call_program topics \
    git topics list --all --porcelain | grep '^+' | sed 's/^+ //' 2>/dev/null
  )"}})
  __git_command_successful && _wanted topics expl "topic" compadd $topics
}

__git_branches() {
  local expl
  declare -a branches
  branches=(${${(f)"$(_call_program branches
    git for-each-ref --format="%(refname:short)" refs/heads 2>/dev/null
  )"}})
  __git_command_successful || return
  _wanted branches expl "branches" compadd $branches
}

__git_command_successful() {
  if (( ${#pipestatus:#0} > 0 )); then
    _message "not a git repository"
    return 1
  fi
  return 0
}
