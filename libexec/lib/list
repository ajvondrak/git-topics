#!/usr/bin/env bash

OPTIONS_SPEC="\
$dashless $command [<options>]
--
r,remote!    list only remote topic branches
a,all!       list both local and remote topic branches
s,short!     output a short format
p,porcelain! output a machine-readable format
"

eval "$(parsed_options "$@")"

patterns=("refs/heads")
format="long"

while test -n "$1"; do
  case "$1" in
    --all) shift; patterns=("refs/heads refs/remotes") ;;
    --remote) shift; patterns=("refs/remotes") ;;
    --short) shift; format="short" ;;
    --porcelain) shift; format="porcelain" ;;
    --) shift ;;
    *) usage ;;
  esac
done

require_setup

push() {
  git rev-parse --symbolic-full-name "$1@{push}" 2>/dev/null
}

topics="
if test %(refname:short) != '$MASTER' &&
   test %(refname:short) != '$DEVELOP' &&
   test %(refname) != '$(push "$MASTER")' &&
   test %(refname) != '$(push "$DEVELOP")' &&
   test -z %(symref); then
  echo %(refname:short)
fi
"

topics() {
  eval "$(xargs git for-each-ref --shell --format="$topics")"
}

finished=($(
  git for-each-ref --format="%(refname)" --merged "$MASTER" $patterns |
  topics
))

integrated=($(
  git for-each-ref --format="%(refname)" --merged "$DEVELOP" $patterns |
  xargs git for-each-ref --format="%(refname)" --no-merged "$MASTER" |
  topics
))

started=($(
  git for-each-ref --format="%(refname)" --no-merged "$DEVELOP" $patterns |
  xargs git for-each-ref --format="%(refname)" --no-merged "$MASTER" |
  topics
))

case "$format" in
  long|short)
    if test -p /dev/stdout; then
      stdout_is_tty="false"
    elif test -t 1; then
      stdout_is_tty="true"
    else
      stdout_is_tty="false"
    fi
    colorize="$(git config --get-colorbool color.topics "$stdout_is_tty")"
    ;;
  porcelain)
    colorize="false"
    ;;
esac

if test "$colorize" = "true"; then
  header_color="$(git config --get-color color.topics.header normal)"
  finished_color="$(git config --get-color color.topics.finished green)"
  integrated_color="$(git config --get-color color.topics.integrated yellow)"
  started_color="$(git config --get-color color.topics.started red)"
  reset_color="$(git config --get-color "" reset)"
fi

if test "${#finished[@]}" -ne 0; then
  case "$format" in
    long)
      echo "${header_color}Topics merged to $MASTER:"
      echo "  (use 'git topics release' to tag a new version)$reset_color"
      echo
      for topic in "${finished[@]}"; do
        echo "    $finished_color$topic$reset_color"
      done
      echo
      ;;
    short|porcelain)
      for topic in  "${finished[@]}"; do
        echo "* $finished_color$topic$reset_color"
      done
      ;;
  esac
fi

if test "${#integrated[@]}" -ne 0; then
  case "$format" in
    long)
      echo "${header_color}Topics merged to $DEVELOP:"
      echo "  (use 'git topics finish' to promote to $MASTER)$reset_color"
      echo
      for topic in "${integrated[@]}"; do
        echo "    $integrated_color$topic$reset_color"
      done
      echo
      ;;
    short|porcelain)
      for topic in "${integrated[@]}"; do
        echo "+ $integrated_color$topic$reset_color"
      done
      ;;
  esac
fi

if test "${#started[@]}" -ne 0; then
  case "$format" in
    long)
      echo "${header_color}Topics not yet merged:"
      echo "  (use 'git topics integrate' to promote to $DEVELOP)$reset_color"
      echo
      for topic in "${started[@]}"; do
        echo "    $started_color$topic$reset_color"
      done
      echo
      ;;
    short|porcelain)
      for topic in "${started[@]}"; do
        echo "- $started_color$topic$reset_color"
      done
      ;;
  esac
fi

if test "${#finished[@]}" -eq 0 &&
   test "${#integrated[@]}" -eq 0 &&
   test "${#started[@]}" -eq 0; then
  case "$format" in
    long)
      echo "${header_color}No topics found."
      echo "Use 'git topics start' to create a new branch.$reset_color"
      ;;
    short|porcelain)
      ;;
  esac
fi
