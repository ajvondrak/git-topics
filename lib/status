#!/usr/bin/env bash

OPTIONS="[-a|--all] [-r|--remotes] [-s|--short] [-p|--porcelain]"

for option in "$@"; do
  case "$option" in
    *) usage ;; # TODO
  esac
done

require_setup

push_for() {
  git rev-parse --symbolic-full-name "$1@{push}" 2>/dev/null
}

MASTER_PUSH="$(push_for "$MASTER")"
DEVELOP_PUSH="$(push_for "$DEVELOP")"

not_a_topic_branch() {
  case "$1" in
    HEAD|refs/*/HEAD) return 0 ;;
    "$MASTER_PUSH"|"$DEVELOP_PUSH") return 0 ;;
    "refs/heads/$MASTER"|"refs/heads/$DEVELOP") return 0 ;;
    *) test -z "$(git merge-base "$MASTER" "$1")" ;;
  esac
}

ON_MASTER=()
ON_DEVELOP=()
ON_TOPIC=()

while read branch; do
  if not_a_topic_branch "$branch"; then
    continue
  elif git merge-base --is-ancestor "$branch" "$MASTER"; then
    ON_MASTER+=("$branch")
  elif git merge-base --is-ancestor "$branch" "$DEVELOP"; then
    ON_DEVELOP+=("$branch")
  else
    ON_TOPIC+=("$branch")
  fi
done < <(
  if test -n "$remotes"; then
    git for-each-ref --format="%(refname)" refs/remotes
  else
    git for-each-ref --format="%(refname)" refs/heads
  fi
)

if test -p /dev/stdout; then
  stdout_is_tty="false"
elif test -t 1; then
  stdout_is_tty="true"
else
  stdout_is_tty="false"
fi

color="$(git config --get-colorbool color.ui "$stdout_is_tty")"
color() {
  if test "$color" = "true"; then
    echo "%(color:$1)"
  fi
}

format() {
  echo "$(color "$1")%(refname:short)"
}

if test "${#ON_MASTER[@]}" -ne 0; then
  if test -n "$verbose"; then
    echo "Topics merged to $MASTER:"
    echo "  (use 'git topics release [major|minor|patch]' to tag a new version)"
    echo
    echo "${ON_MASTER[@]}" |
    xargs git for-each-ref --format="    $(format "green")"
    echo
  else
    echo "${ON_MASTER[@]}" |
    xargs git for-each-ref --format="* $(format "green")"
  fi
fi

if test "${#ON_DEVELOP[@]}" -ne 0; then
  if test -n "$verbose"; then
    echo "Topics merged to $DEVELOP:"
    echo "  (use 'git topics finish <topic>' to promote to $MASTER)"
    echo
    echo "${ON_DEVELOP[@]}" |
    xargs git for-each-ref --format="    $(format "normal")"
    echo
  else
    echo "${ON_DEVELOP[@]}" |
    xargs git for-each-ref --format="  $(format "normal")"
  fi
fi

if test "${#ON_TOPIC[@]}" -ne 0; then
  if test -n "$verbose"; then
    echo "Topics not yet merged:"
    echo "  (use 'git topics integrate <topic>' to promote to $DEVELOP)"
    echo
    echo "${ON_TOPIC[@]}" |
    xargs git for-each-ref --format="    $(format "red")"
    echo
  else
    echo "${ON_TOPIC[@]}" |
    xargs git for-each-ref --format="? $(format "red")"
  fi
fi
