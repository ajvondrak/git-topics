#!/usr/bin/env bash

OPTIONS="[major|minor|patch]"

case "$1" in
  major|minor|patch) ;;
  *) usage ;;
esac

require_setup
require_clean_work_tree "tag a new release"

keep_up_to_date "$MASTER"
git checkout "$MASTER"

tip="$(git describe --exact-match --abbrev=0 "$MASTER" 2>/dev/null)" && {
  echo >&2 "The tip of the '$MASTER' branch is already tagged '$tip'."
  echo >&2 "Use 'git topics finish' before tagging a new version."
  exit 1
}

last_tag="$(git describe --abbrev=0 "$MASTER" 2>/dev/null || echo "v0.0.0")"

if [[ $last_tag =~ ^([^0-9]*)([0-9]+)(\.([0-9]+))?(\.([0-9]+))? ]]; then
  label="${BASH_REMATCH[1]}"
  major="${BASH_REMATCH[2]:-0}"
  minor="${BASH_REMATCH[4]:-0}"
  patch="${BASH_REMATCH[6]:-0}"
else
  echo >&2 "Last tag '$last_tag' does not look like a version."
  echo >&2 "You may have to use 'git tag -a' by hand."
  exit 1
fi

case "$1" in
  major) next_tag="$label$((major + 1)).0.0" ;;
  minor) next_tag="$label$major.$((minor + 1)).0" ;;
  patch) next_tag="$label$major.$minor.$((patch + 1))" ;;
esac

topics="$(git topics status --porcelain | grep '^\*' | sed 's/^\* //')"

cat <<-TEMPLATE > "$GIT_DIR/TAG_EDITMSG"

#
# Please enter the tag message for your release. Lines starting
# with '#' will be ignored, and an empty message aborts the release.
#
# Releasing $next_tag (was $last_tag)
# Topics to be released:
$(echo "$topics" | sed 's/^/#   /')
TEMPLATE

git_editor "$GIT_DIR/TAG_EDITMSG"
grep -v "^#" < "$GIT_DIR/TAG_EDITMSG" |
git stripspace > "$GIT_DIR/TAG_FINALMSG"

if test -s "$GIT_DIR/TAG_FINALMSG"; then
  git tag "$next_tag" "$MASTER" -F "$GIT_DIR/TAG_FINALMSG"
else
  echo >&2 "Aborting release due to empty tag message."
  exit 1
fi

pushremote_for() {
  git config "branch.$1.pushremote" ||
  git config "remote.pushdefault" ||
  git config "branch.$1.remote" || {
    echo >&2 "Branch $1 has no remote for pushing."
    return 1
  }
}

pushref_for() {
  git config "branch.$1.merge" || {
    echo >&2 "Branch $1 has no corresponding remote branch."
    return 1
  }
}

delete_remote_topic() {
  local remote ref
  remote="$(pushremote_for "$1")" || return 1
  ref="$(pushref_for "$1")" || return 1
  git push "$remote" --delete "$ref"
}

delete_local_topic() {
  git branch --delete "$1"
}

while read topic; do
  delete_remote_topic "$topic"
  delete_local_topic "$topic"
done < <(echo "$topics")
