#!/usr/bin/env bash

usage() {
  echo >&2 "usage: git topics setup [-f|--force]"
  echo >&2
  echo >&2 "See 'git topics help setup'."
  exit 1
}

case "$1" in
  "") force= ;;
  -f|--force) force=t ;;
  *) usage ;;
esac

force() {
  test -n "$force"
}

missing_config() {
  ! git config --get "git-topics.$1" >/dev/null 2>&1
}

use_local_branch() {
  if ! git show-ref --quiet --verify -- "refs/heads/$1"; then
    echo >&2 "No local branch $1."
    return 1
  fi
}

track_unique_remote_branch() {
  case "$(remote_branches_named "$1" | grep -c '^')" in
    0) echo >&2 "No remote branch $1." ; return 1 ;;
    1) git branch "$1" --track "$(remote_branches_named "$1" | head -1)" >&2 ;;
    *) echo >&2 "Ambiguous remote branch $1." ; return 1 ;;
  esac
}

remote_branches_named() {
  git for-each-ref "refs/remotes/*/$1" --format="%(refname)"
}

branch_off_master() {
  echo >&2 "Branching $1 off of $master."
  git branch "$1" "$master" >&2
}

validate_merge_base() {
  if ! git merge-base "$1" "$2" >/dev/null 2>&1; then
    echo >&2 "Branch $1 is not based on branch $2."
    exit 1
  fi
}

require_clean_work_tree "setup git topics"

if missing_config "master" || force; then
  echo "You need a branch that tracks stable releases for your repository."
  echo "Commits here may be shipped at any time. Versions are defined by tags."
  echo
  echo -n "What should the stable branch be named (default: 'master')? "
  read name
  branch="${name:-master}"
  use_local_branch "$branch" ||
  track_unique_remote_branch "$branch" ||
  exit 1
  git config git-topics.master "$branch"
fi

master="$(git config --get git-topics.master)"
echo "Your master branch is named '$master'."
echo

if missing_config "develop" || force; then
  echo "You need a branch to stage and test unstable topics that are not yet"
  echo "ready to be merged to '$master'."
  echo
  echo -n "What should the staging branch be named (default: 'develop')? "
  read name
  branch="${name:-develop}"
  use_local_branch "$branch" ||
  track_unique_remote_branch "$branch" ||
  branch_off_master "$branch"
  validate_merge_base "$branch" "$master"
  git config git-topics.develop "$branch"
fi

develop="$(git config --get git-topics.develop)"
echo "Your develop branch is named '$develop'."
echo

echo "git-topics is setup! See 'git help topics' to get started."
